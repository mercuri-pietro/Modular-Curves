

// input

// level
NN:=42;

// genus
genere:=7;

// genus curve above
gg:=16;

// q-series precision wanted
coefprec:=5800;

// group
G:=sub<GL(2,Integers(NN))|[
[5,26,12,35],
[5,41,6,41],
[25,11,6,31],
[31,1,36,23],
[31,5,6,11]
]>;


/////////////////////////////////////////////////////////////////////////////////////////


// find a basis of cusp forms for the modular curves

// after Zywina's code
// basis of G-invariant cusp forms of level 42
M:=CreateModularCurveRec0(G); //function defined in Zywina's files
M:=FindModularForms(2,M,coefprec); //function defined in Zywina's files
M2:=FindCuspForms(M); //function defined in Zywina's files
formetemp:=M2`F0;
forme:=[];
for ff in formetemp do
  Append(~forme,ff[1]);
end for;


/////////////////////////////////////////////////////////////////////////////////////////


// find a basis of cusp forms for the quotient

// sampling values
precC:=200;
C<I>:=ComplexField(precC);
RR<qC>:=PowerSeriesRing(C);
zz:=Exp(2*Pi(C)*I/NN);
FR<qN>:=Parent(forme[1]);
Qcyc<z>:=BaseRing(FR);
embed:=hom<Qcyc->C|zz>;
phi:=hom<FR->RR|qC>;
passo:=1/(10*gg);
taulist:=[];
for t in [1..gg-1] do
  m:=t+0.0;
  x1:=C!(m*passo);
  y1:=Sqrt(1/6-x1^2);
  Append(~taulist,x1+I*y1);
  Append(~taulist,-x1+I*y1);
end for;
qlist:=[];
for tau in taulist do
  Append(~qlist,Exp(2*Pi(C)*I*tau/NN));
end for;


// coefficients matrix
Mcoefl:=[];
for f in forme do
  for qq in qlist do
    Append(~Mcoefl,Evaluate(phi(f),qq));
  end for;
end for;
Mcoef:=Matrix(C,#forme,#qlist,Mcoefl);


// Atkin-Lehner matrix
W:=Matrix(Rationals(),2,2,[6,-1,6,0]);
detW:=Determinant(W);


// Atkin-Lehner images of sampling values
qwlist:=[];
denlist:=[];
for tau in taulist do
  Append(~qwlist,Exp(2*Pi(C)*I*((W[1,1]*tau+W[1,2])/(W[2,1]*tau+W[2,2]))/NN));
  Append(~denlist,(W[2,1]*tau+W[2,2])^2);
end for;


// constant terms
termininotil:=[];
for f in forme do
  for i:=1 to #qwlist do
    Append(~termininotil,detW*Evaluate(phi(f),qwlist[i])/denlist[i]);
  end for;
end for;
termininoti:=Matrix(C,#forme,#qwlist,termininotil);


// solve linear system
precC:=30;
C<I>:=ComplexField(precC);
Mcoef:=Matrix(C,#forme,#qlist,Mcoefl);
termininoti:=Matrix(C,#forme,#qwlist,termininotil);
sol:=Solution(Mcoef,termininoti);


// simplify
mcd:=36;
intsol:=sol*mcd;


// coordinates of Atkin-Lehner images
ALcoord:=[];
for i:=1 to NumberOfRows(intsol) do
  coord:=[];
  for j:=1 to NumberOfColumns(intsol) do
    solappr:=Integers()!Round(intsol[i,j]);
    if Abs(solappr-intsol[i,j]) lt 10^(-8) then
      Append(~coord,solappr/mcd);
    else
      print "approximation error for row ", i," and column ",j;
    end if;
  end for;
  Append(~ALcoord,coord);
end for;


// Atkin-Lehner images
ALimg:=[];
for c in ALcoord do
  wimg:=0;
  for i:=1 to #forme do
    wimg:=wimg+c[i]*forme[i];
  end for;
  Append(~ALimg,wimg);
end for;


// Atkin-Lehner invariant forms
ALinva:=[];
for i:=1 to #forme do
  Append(~ALinva,forme[i]+ALimg[i]);
end for;


/////////////////////////////////////////////////////////////////////////////////////////


// prettifying the basis of cusp forms

// matrix of the integer coordinates of Fourier coefficients
QQ:=Rationals();
ZZ:=Integers();
dCFp:=EulerPhi(NN);
Rtemp<zN>:=PolynomialRing(QQ);
psi:=hom<Qcyc->Rtemp|zN>;
mcointext:=ZeroMatrix(ZZ,#ALinva,(coefprec-1)*dCFp);
for ss:=1 to #ALinva do
  count:=0;
  for nn:=1 to coefprec-1 do
    for kk:=1 to dCFp do
      count:=count+1;
      mcointext[ss,count]:=Coefficient(psi(Coefficient(ALinva[ss],nn)),kk-1);
    end for;
  end for;
end for;
mcoint:=Submatrix(mcointext,[1..genere],[1..NumberOfColumns(mcointext)]);


// find and eliminate bad primes
Mprettifying:=IdentityMatrix(QQ,genere);
mcointnobadp:=mcoint;
badp:=[];
testmatrix:=Submatrix(mcoint,[1..genere],[133,139,205,206,277,278,352]);
dettest:=Determinant(testmatrix);
fac:=Factorization(dettest);
if #fac gt 0 then
  for el in fac do
    badp:=Append(badp,el[1]);
  end for;
end if;
for ell in badp do
  FFell:=FiniteField(ell);
  matmodell:=ZeroMatrix(FFell,NumberOfRows(mcointnobadp),NumberOfColumns(mcointnobadp));
  for ii:=1 to NumberOfRows(matmodell) do
    for jj:=1 to NumberOfColumns(matmodell) do
      matmodell[ii,jj]:=FFell!mcointnobadp[ii,jj];
    end for;
  end for;
  rk:=Rank(matmodell);
  if (rk lt genere) then
    while (rk lt genere) do
      kermod:=KernelMatrix(matmodell);
      rowstochange:=[];
      for ii:=1 to NumberOfRows(kermod) do
        for jj:=1 to NumberOfColumns(kermod) do
          if kermod[ii,jj] eq ell-1 then
            rowstochange:=Append(rowstochange,jj);
            break jj;
          end if;
        end for;
      end for;
      kermodlift:=ZeroMatrix(ZZ,NumberOfRows(kermod),NumberOfColumns(kermod));
      for ii:=1 to NumberOfRows(kermodlift) do
        for jj:=1 to NumberOfColumns(kermodlift) do
          kermodlift[ii,jj]:=ZZ!kermod[ii,jj];
          if (kermodlift[ii,jj] gt ((ell-1)/2)) then
            kermodlift[ii,jj]:=kermodlift[ii,jj]-ell;
          end if;
        end for;
      end for;
      mtemp:=kermodlift*mcointnobadp;
      for ii:=1 to NumberOfRows(mtemp) do
        for jj:=1 to NumberOfColumns(mtemp) do
          mtemp[ii,jj]:=mtemp[ii,jj]/ell;
        end for;
      end for;
      for ii:=1 to #rowstochange do
        mcointnobadp[rowstochange[ii]]:=mtemp[ii];
      end for;
      mell:=IdentityMatrix(QQ,genere);
      for jj:=1 to NumberOfColumns(mell) do
        mell[1,jj]:=kermodlift[1,jj]/ell;
      end for;
      Mprettifying:=mell*Mprettifying;
      matmodell:=ZeroMatrix(FFell,NumberOfRows(mcointnobadp),NumberOfColumns(mcointnobadp));
      for ii:=1 to NumberOfRows(matmodell) do
        for jj:=1 to NumberOfColumns(matmodell) do
          matmodell[ii,jj]:=FFell!mcointnobadp[ii,jj];
        end for;
      end for;
      rk:=Rank(matmodell);
    end while;
  end if;
end for;

// LLL
mcolll,mllltrasf:=LLL(mcointnobadp);
Mprettifying:=ChangeRing(mllltrasf,QQ)*Mprettifying;

// back to q-expansions
fqpretty:=[];
for ii:=1 to genere do
  fqpretty:=Append(fqpretty,O(qN^coefprec));
end for;
for ss:=1 to genere do
  for nn:=1 to coefprec-1 do
    for kk:=1 to dCFp do
      fqpretty[ss]:=fqpretty[ss]+mcolll[ss,kk+dCFp*(nn-1)]*z^(kk-1)*qN^nn;
    end for;
  end for;
end for;


/////////////////////////////////////////////////////////////////////////////////////////


// canonical model

// equations
eqnum:=Binomial(genere-2,2);
numdeg2:=Binomial(genere+1,2);
deg2:=[];
for i1:=1 to genere do
  for i2:=i1 to genere do
    deg2:=Append(deg2,fqpretty[i1]*fqpretty[i2]);
  end for;
end for;
mmint:=ZeroMatrix(ZZ,numdeg2,(coefprec-1)*dCFp);
for ss:=1 to numdeg2 do
  count:=0;
  for nn:=1 to coefprec-1 do
    for kk:=1 to dCFp do
      count:=count+1;
      mmint[ss,count]:=Coefficient(psi(Coefficient(deg2[ss],nn)),kk-1);
    end for;
  end for;
end for;
kerint:=KernelMatrix(mmint);
if not(NumberOfRows(kerint) eq eqnum) then
  print "Error! The number of quadratic equations found is wrong!";
  print "It is",NumberOfRows(kerint);
  print "It must be",eqnum;
else
  ER<[x]>:=PolynomialRing(Qcyc,genere);
  mon2:=[];
  for i1:=1 to genere do
    for i2:=i1 to genere do
      mon2:=Append(mon2,ER.i1*ER.i2);
    end for;
  end for;
  coefeq:=kerint;
  equations:=[ER|];
  for ss:=1 to NumberOfRows(kerint) do
    equations:=Append(equations,0);
  end for;
  for ss:=1 to NumberOfRows(kerint) do
    for kk:=1 to numdeg2 do
      equations[ss]:=equations[ss]+coefeq[ss][kk]*mon2[kk];
    end for;
  end for;
  for kk:=1 to #equations do
    equations[kk];
  end for;
end if;



